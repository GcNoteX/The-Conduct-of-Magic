class_name CustomerData
extends Resource

@export_category("General")
@export var name: String
@export var face_sprite: String
## Which map the customer will be in
@export var spawn_location: GameConstants.Locations 

## Dictates the behaviour of the customer when making comissions.
@export_category("Personality")
## How much they can pay the player for their job
@export_range(0, 3, 0.1) var richness: float  = 1
## An added duration to how long it should take to solve the artifact before the customer comes back to receive
@export_range(0, 5, 1) var patience: int = 3
## Accuracy in determining the runes on a comissioned artifact
@export_range(0, 5, 1) var intelligence: int = 3
## Customer dialogue
@export var dialogue: Dictionary


# Non special customers will be generated by the game
@export_category("Special Characters")
@export var is_special: bool = false
@export_range(0, 5, 1) var favorability: int = 0
@export var special_commissions: Array[CommissionData]


# Attributes assigned to using the data from general and personality
var commission: CommissionData
var return_day: int

# Used to prepare a default and randomized instance of characters based on the location
func prepare_character_data(location):
	# TODO: Make it location based
	var generic_names = GameConstants.GenericNames
	name = generic_names[randi() % len(generic_names)]
	var face_sprites = GameConstants.FaceSpritePool[location]
	face_sprite = face_sprites[randi() % len(face_sprites)]
	spawn_location = location
	
	# TODO: Inserting dialogue
	
	# TODO: personality biased based on location
	richness = round(randf_range(0, 3) * 10)/10
	patience = randi_range(1 ,1)
	intelligence = randi_range(0, 5)
	
	# TODO: Make a commission for the npc 
	# Get an artifact (None special NPCs only instance for one artifact so we just generate it based on a pool)
	var artifact_pool: Array = GameConstants.ArtifactPool[location]
	var random_artifact =  artifact_pool[randi() % len(artifact_pool)]
	var artifact_path = GameConstants.artifact_path + random_artifact 
	var artifact: Artifact = load(artifact_path)
	commission = generate_commission(artifact)
	
func generate_commission(artifact: Artifact) -> CommissionData:
	var commission: CommissionData = load("res://CommissionPapers/commissions.gd").new()
	commission.prepare_commission_data(self, artifact)
	return commission
